xquery version "3.1";

module namespace _ = 'https://www.oeaw.ac.at/acdh/tools/vle/plugins/elasticsearch-update';
import module namespace api-problem = "https://tools.ietf.org/html/rfc7807" at '../api-problem.xqm';
import module namespace elasicsearch-export = "https://www.oeaw.ac.at/acdh/dboe_tei_modelling/xquery/elasticsearchExport" at "../../../dboe_tei_modelling/xquery/elasticsearchExport.xqm";

declare namespace tei = "http://www.tei-c.org/ns/1.0";

declare variable $_:index-name := 'dboe';
(: for local testing use e.g.
   docker run -e HTTP_PORT=9200 -e HTTPS_PORT=9300 -p 9200:9200 -p 9300:9300 --rm -t mendhak/http-https-echo:30 :)
declare variable $_:elasticsearch-bulk-href := 'http://localhost:9200/_bulk';
declare variable $_:elasticsearch-bulk-auth := 'Basic YmFzZXgtdXXXX==';
declare variable $_:xslt := 'entry-to-ag5-fields.xsl';
declare variable $_:log-elasticsearch-results := true();

declare function _:after_created($data as map(xs:string, map(xs:string, map(xs:string, item()?))), $dict as xs:string, $db_name as xs:string, $changingUser as xs:string) as map(*) {
api-problem:trace-info('@plugins_elasticsearch-update@after_created',
          prof:track(
  if ($data?current?*?entry instance of element(tei:entry)+) then _:write-log(_:sendToElasticasearch(map:for-each($data?current, function($id, $data) {_:createNDJsonDataHeader($id), _:createNDJsonDataBody($data?entry)}))) else ()
))
};

declare function _:after_updated($data as map(xs:string, map(xs:string, map(xs:string, item()?))), $dict as xs:string, $db_name as xs:string, $changingUser as xs:string) as map(*) {
api-problem:trace-info('@plugins_elasticsearch-update@after_updated',
          prof:track(
  if ($data?current?*?entry instance of element(tei:entry)+) then _:sendToElasticasearch(map:for-each($data?current, function($id, $data) {_:createNDJsonDataHeader($id), _:createNDJsonDataBody($data?entry)})) else ()
))
};

declare function _:after_deleted($dict as xs:string, $id as xs:string, $db_name as xs:string, $changingUser as xs:string) as map(*) {
api-problem:trace-info('@plugins_elasticsearch-update@after_deleted',
          prof:track(
  error(xs:QName('_:error'), 'Not implemented')
))
};

declare function _:createNDJsonDataHeader($id as xs:string) as xs:string{
  json:serialize(
        <json type="object">
          <index type="object">
            <__index>{$_:index-name}</__index>
            <__id>{$id}</__id>
          </index>
        </json>,
  map {'indent': 'no'})
};

declare function _:createNDJsonDataBody($data as element()) as xs:string {
  let $enhanced-data := elasicsearch-export:addStringsAsAttributeWithoutDiacritics($data),
      $siglen := $data//*:listPlace/@corresp,
      $siglen-to-polygone := parse-json(serialize(doc('helper_json/sigle-polygone.json'), map {'method': 'json'})),
      $json-as-xquery-maps := map:merge((
        elasicsearch-export:get-sigle-polygone($siglen, $siglen-to-polygone)
      , if ($siglen[.='this:QDB']) then () else elasicsearch-export:try-get-qdb-polygone($enhanced-data, $siglen-to-polygone)
      , elasicsearch-export:serializeXMLasBadgerfishJSON($enhanced-data)
      , elasicsearch-export:extractDataUsingXSLT($enhanced-data, $_:xslt, false())
      ))
       (: , prof:sleep(1000)  :)
       (: , elasicsearch-export:serializeXMLasBadgerfishJSON($enhanced-data):)
  return serialize($json-as-xquery-maps, map {"method": "json", "indent": "no"})
};

declare function _:sendToElasticasearch($ndjsons as xs:string*) {
let $response := http:send-request(<http:request method="post">
      <http:header name="User-Agent" value="vleserver-basex"/>
      <http:header name="Authorization" value="{$_:elasticsearch-bulk-auth}"/>
      <http:body media-type='application/x-ndjson'>{string-join($ndjsons, '&#x0a;')||'&#x0a;'}</http:body>
    </http:request>, $_:elasticsearch-bulk-href)
return $response
};

declare function _:write-log($seq as item()+) as empty-sequence() {
let $e := $seq[. instance of node()],
    $ns := namespace-uri(<_:_/>),
    $logID := if (string-length($ns) > 30) then '...'||substring(namespace-uri(<_:_/>), string-length($ns) - 27, 28) else $ns,
    $message := $logID||': '||$e/@status||': '||string-join(($e/@message, $e/*:header[@name = 'Warning']/@value), ' ')||' '||
  (if (contains($e/*:body/@media-type, 'application/json')) then
    serialize(<json type='object'>{if (exists($e/items/_[1]/*)) then $e/items/_[1]/* else $e[2]/*}</json>, map{'method': 'json', 'indent': false()})
  else if ($e[2]) then serialize($e[2], map{'method': 'xml', 'indent': false()})
  else $seq[2]
  )
return if ($_:log-elasticsearch-results) then admin:write-log($message, 'INFO') else ()
};